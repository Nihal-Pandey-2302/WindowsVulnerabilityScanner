import subprocess
import os
from jinja2 import Template
import argparse
from datetime import datetime
from tkinter import filedialog, Tk

def get_os_details():
    command = "Get-WmiObject -Class Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_installed_hotfixes():
    command = "Get-HotFix"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_windows_defender_status():
    command = "Get-MpPreference | Select-Object -Property DisableRealtimeMonitoring"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_auto_run_executables():
    command = "Get-CimInstance -ClassName Win32_StartupCommand | Select-Object Name, Command"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def check_firewall_status():
    command = "Get-NetFirewallProfile | Select-Object -Property Name, Enabled"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    if "False" in result.stdout:
        return "Firewall is disabled."
    return "Firewall is enabled."

def check_antivirus_definitions():
    command = "Get-MpComputerStatus | Select-Object -Property AntivirusSignatureLastUpdated"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def check_rdp_settings():
    command = "Get-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server' | Select-Object -Property fDenyTSConnections"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    if "0" in result.stdout:
        return "Remote Desktop is enabled (fDenyTSConnections=0)."
    return "Remote Desktop is disabled (fDenyTSConnections=1)."

def enable_firewall():
    command = "Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True"
    subprocess.run(["powershell", "-Command", command])
    print("Firewall enabled.")

def generate_report(system_info, vulnerabilities, firewall_status, antivirus_definitions, rdp_settings, output_file):
    # Use an absolute path for the template
    template_path = os.path.join(os.path.dirname(__file__), "templates", "report_template.html")
    
    # Load the template
    try:
        with open(template_path) as file:
            template = Template(file.read())
    except FileNotFoundError as e:
        print(f"Template file not found: {e}")
        return
    
    # Render the template with system info and vulnerabilities
    report_content = template.render(
        system_info=system_info,
        vulnerabilities=vulnerabilities,
        firewall_status=firewall_status,
        antivirus_definitions=antivirus_definitions,
        rdp_settings=rdp_settings,
        current_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )
    
    # Write the report to an HTML file
    try:
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        with open(output_file, "w") as file:
            file.write(report_content)
        print(f"Report generated at: {output_file}")
    except Exception as e:
        print(f"Failed to generate report: {e}")

def main():
    parser = argparse.ArgumentParser(description='Windows Vulnerability Scanner')
    parser.add_argument('--output', type=str, help='Output file name (HTML format)', default='output/report.html')
    args = parser.parse_args()

    print("Collecting system information...")
    os_details = get_os_details()
    hotfixes = get_installed_hotfixes()
    defender_status = get_windows_defender_status()
    auto_run_execs = get_auto_run_executables()
    firewall_status = check_firewall_status()
    antivirus_definitions = check_antivirus_definitions()
    rdp_settings = check_rdp_settings()
    
    system_info = f"OS Details:\n{os_details}\n\nInstalled Hotfixes:\n{hotfixes}\n\nWindows Defender Status:\n{defender_status}\n\nAuto-Run Executables:\n{auto_run_execs}"
    
    print("Checking for vulnerabilities...")
    vulnerabilities = []
    if "Firewall is disabled." in firewall_status:
        vulnerabilities.append("Firewall is disabled.")
        enable_firewall()  # Automatically enable firewall if disabled
    if "AntivirusSignatureLastUpdated" in antivirus_definitions:
        # Add logic to check if definitions are outdated
        vulnerabilities.append("Antivirus definitions may be outdated.")
    
    # Add more checks here if needed

    print("Generating report...")
    generate_report(
        system_info=system_info,
        vulnerabilities=vulnerabilities,
        firewall_status=firewall_status,
        antivirus_definitions=antivirus_definitions,
        rdp_settings=rdp_settings,
        output_file=args.output
    )

if __name__ == "__main__":
    main()
