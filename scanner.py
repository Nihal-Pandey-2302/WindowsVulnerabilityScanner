import subprocess
from jinja2 import Template
import os


# System Information

def get_os_details():
    command = "Get-WmiObject -Class Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_installed_hotfixes():
    command = "Get-HotFix"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_windows_defender_status():
    command = "Get-MpPreference | Select-Object -Property DisableRealtimeMonitoring"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_auto_run_executables():
    command = "Get-CimInstance -ClassName Win32_StartupCommand | Select-Object Name, Command"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

#Basic Vulnerability Detection

def check_outdated_os(os_details):
    supported_versions = ["10.0.19042", "10.0.19043"]  # Example supported versions
    if any(version in os_details for version in supported_versions):
        return "OS version is up-to-date."
    else:
        return "Outdated OS version detected."

def check_defender_disabled(defender_status):
    if "True" in defender_status:
        return "Windows Defender is disabled."
    else:
        return "Windows Defender is enabled."

#Report Generation
def generate_report(system_info, vulnerabilities, output_file="output/report.html"):
    # Load the template
    with open("templates/report_template.html") as file:
        template = Template(file.read())
    
    # Render the template with system info and vulnerabilities
    report_content = template.render(system_info=system_info, vulnerabilities=vulnerabilities)
    
    # Write the report to an HTML file
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    with open(output_file, "w") as file:
        file.write(report_content)

    print(f"Report generated: {output_file}")

def main():
    print("Collecting system information...")
    os_details = get_os_details()
    hotfixes = get_installed_hotfixes()
    defender_status = get_windows_defender_status()
    auto_run_execs = get_auto_run_executables()
    
    system_info = f"OS Details:\n{os_details}\n\nInstalled Hotfixes:\n{hotfixes}\n\nWindows Defender Status:\n{defender_status}\n\nAuto-Run Executables:\n{auto_run_execs}"
    
    print("Checking for vulnerabilities...")
    vulnerabilities = []
    vulnerabilities.append(check_outdated_os(os_details))
    vulnerabilities.append(check_defender_disabled(defender_status))
    
    print("Generating report...")
    generate_report(system_info, vulnerabilities)

if __name__ == "__main__":
    main()

