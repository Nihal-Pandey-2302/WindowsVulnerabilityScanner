# Define the Generate-Report function
function Generate-Report {
  param (
      [Parameter(Mandatory=$true)]
      [hashtable]$data
  )

  $html = @"
<!DOCTYPE html>
<html>
<head>
  <title>Vulnerability Report</title>
  <style>
      body { font-family: Arial, sans-serif; }
      h1 { color: #333; }
      .section { margin-bottom: 20px; }
      .vulnerability { color: red; font-weight: bold; }
  </style>
</head>
<body>
  <h1>System Vulnerability Report</h1>
  <div class='section'>
      <h2>System Information</h2>
      <pre>$($data.system_info)</pre>
  </div>
  <div class='section'>
      <h2>.NET Framework Versions</h2>
      <pre>$($data.dotnet_versions)</pre>
  </div>
  <div class='section'>
      <h2>Detected Vulnerabilities</h2>
      $($data.vulnerabilities)
  </div>
  <div class='section'>
      <h2>Firewall Status</h2>
      <pre>$($data.firewall_status)</pre>
  </div>
  <div class='section'>
      <h2>Antivirus Definitions</h2>
      <pre>$($data.antivirus_definitions)</pre>
  </div>
  <div class='section'>
      <h2>RDP Settings</h2>
      <pre>$($data.rdp_settings)</pre>
  </div>
  <div class='section'>
      <h2>Network Information</h2>
      <pre>$($data.network_info)</pre>
  </div>
  <div class='section'>
      <small>Generated on $($data.current_date)</small>
  </div>
</body>
</html>
"@
  return $html
}

# Define the Save-ReportToFile function
function Save-ReportToFile {
  param (
      [Parameter(Mandatory=$true)]
      [string]$reportContent,
      [Parameter(Mandatory=$true)]
      [string]$outputPath
  )

  try {
      $reportContent | Out-File -FilePath $outputPath -Encoding UTF8
      Write-Host "Report successfully saved to $outputPath"
  } catch {
      Write-Host "Failed to save the report: $_"
  }
}

# Define the Generate-VulnerabilityReport function
function Generate-VulnerabilityReport {
  $osDetails = Get-ComputerInfo | Select-Object -Property OsName, WindowsVersion, OsArchitecture | Out-String
  $dotNetVersions = Get-ChildItem -Path 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP' -Recurse |
                      Get-ItemProperty -Name Version, Release -ErrorAction SilentlyContinue |
                      Where { $_.PSChildName -match '^(?!S)\p{L}'} | Select-Object -Property PSChildName, Version | Out-String
  $hotfixes = Get-HotFix | Out-String
  $defenderStatus = (Get-MpComputerStatus).AMServiceEnabled | Out-String
  $firewallStatus = Get-NetFirewallProfile | Select-Object -Property Name, Enabled | Out-String
  $antivirusDefinitions = Get-MpComputerStatus | Select-Object -Property AntivirusSignatureLastUpdated | Out-String
  $rdpSettings = (Get-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server").fDenyTSConnections | Out-String
  $networkInfo = Get-NetIPAddress | Out-String

  $vulnerabilities = @()
  if ($firewallStatus -match "False") {
      $vulnerabilities += "<div class='vulnerability'>Firewall is disabled.</div>"
  }
  if ($defenderStatus -eq $false) {
      $vulnerabilities += "<div class='vulnerability'>Windows Defender is disabled.</div>"
  }
  if ($antivirusDefinitions -match "AntivirusSignatureLastUpdated") {
      $vulnerabilities += "<div class='vulnerability'>Antivirus definitions may be outdated.</div>"
  }

  if ($vulnerabilities.Count -eq 0) {
      $vulnerabilities = "<p>No vulnerabilities detected.</p>"
  } else {
      $vulnerabilities = $vulnerabilities -join "`n"
  }

  $data = @{
      current_date = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
      system_info = $osDetails
      dotnet_versions = $dotNetVersions
      vulnerabilities = $vulnerabilities
      firewall_status = $firewallStatus
      antivirus_definitions = $antivirusDefinitions
      rdp_settings = $rdpSettings
      network_info = $networkInfo
  }

  $reportContent = Generate-Report -data $data
  $reportPath = "C:\Users\pande\Documents\Vulnerability_Report.html"
  Save-ReportToFile -reportContent $reportContent -outputPath $reportPath

  Write-Host "Report saved to: $reportPath"
}

# Run the report generation
Generate-VulnerabilityReport
