import subprocess
import os
from jinja2 import Template
from datetime import datetime
from tkinter import Tk, Label, Button, filedialog, messagebox
from graphviz import Digraph

# Function Definitions

def get_os_details():
    command = "Get-WmiObject -Class Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_dotnet_versions():
    command = "Get-ChildItem 'HKLM:\\SOFTWARE\\dotnet\\Setup\\NDP' -Recurse | Get-ItemProperty -Name Version -ErrorAction SilentlyContinue | Select-Object -Property PSPath, Version"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_amsi_providers():
    command = "Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WinTrust\\Trust Providers\\Software Publishing' | Select-Object -Property AMSI"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_installed_hotfixes():
    command = "Get-HotFix"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_windows_defender_status():
    command = "Get-MpPreference | Select-Object -Property DisableRealtimeMonitoring"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_auto_run_executables():
    command = "Get-CimInstance -ClassName Win32_StartupCommand | Select-Object Name, Command"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def check_firewall_status():
    command = "Get-NetFirewallProfile | Select-Object -Property Name, Enabled"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    if "False" in result.stdout:
        return "Firewall is disabled."
    return "Firewall is enabled."

def check_antivirus_definitions():
    command = "Get-MpComputerStatus | Select-Object -Property AntivirusSignatureLastUpdated"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def check_rdp_settings():
    command = "Get-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server' | Select-Object -Property fDenyTSConnections"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    if "0" in result.stdout:
        return "Remote Desktop is enabled (fDenyTSConnections=0)."
    return "Remote Desktop is disabled (fDenyTSConnections=1)."

def get_audit_policy_settings():
    command = "AuditPol /get /category:*"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_environment_info():
    command = "Get-ChildItem Env:"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_sddl_info():
    command = "Get-ACL -Path C:\\ | Select-Object -Property Sddl"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_defender_exclusions():
    command = "Get-MpPreference | Select-Object -Property ExclusionProcess, ExclusionExtension, ExclusionPath"
    result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
    return result.stdout.strip()

def get_network_info():
    commands = {
        "ARP Table": "Get-NetNeighbor",
        "DNS Cache": "Get-DnsClientCache",
        "Network Profiles": "Get-NetConnectionProfile",
        "Network Shares": "Get-SmbShare",
        "TCP Connections": "Get-NetTCPConnection",
        "UDP Connections": "Get-NetUDPEndpoint",
        "Open Ports": "Get-NetFirewallPortFilter"
    }
    results = {}
    for key, command in commands.items():
        result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
        results[key] = result.stdout.strip()
    return results

def generate_network_diagram(network_info, output_file):
    dot = Digraph()
    
    for key, value in network_info.items():
        dot.node(key, value[:30])  # Limit node label length for clarity
    
    dot.render(output_file, format='png')
    print(f"Network diagram saved as: {output_file}.png")

def generate_report(system_info, vulnerabilities, firewall_status, antivirus_definitions, rdp_settings, network_info, output_file):
    template_path = os.path.join(os.path.dirname(__file__), "templates", "report_template.html")
    try:
        with open(template_path) as file:
            template = Template(file.read())
    except FileNotFoundError as e:
        messagebox.showerror("Error", f"Template file not found: {e}")
        return
    
    report_content = template.render(
        system_info=system_info,
        vulnerabilities=vulnerabilities,
        firewall_status=firewall_status,
        antivirus_definitions=antivirus_definitions,
        rdp_settings=rdp_settings,
        network_info=network_info,
        current_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )
    
    try:
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        with open(output_file, "w") as file:
            file.write(report_content)
        messagebox.showinfo("Success", f"Report generated at: {output_file}")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to generate report: {e}")

def start_scan():
    try:
        os_details = get_os_details()
        dotnet_versions = get_dotnet_versions()
        amsi_providers = get_amsi_providers()
        hotfixes = get_installed_hotfixes()
        defender_status = get_windows_defender_status()
        auto_run_execs = get_auto_run_executables()
        firewall_status = check_firewall_status()
        antivirus_definitions = check_antivirus_definitions()
        rdp_settings = check_rdp_settings()
        audit_policy_settings = get_audit_policy_settings()
        env_info = get_environment_info()
        sddl_info = get_sddl_info()
        defender_exclusions = get_defender_exclusions()
        network_info = get_network_info()
        
        system_info = f"""
        OS Details:\n{os_details}
        \nDotNet Versions:\n{dotnet_versions}
        \nAMSI Providers:\n{amsi_providers}
        \nInstalled Hotfixes:\n{hotfixes}
        \nWindows Defender Status:\n{defender_status}
        \nAuto-Run Executables:\n{auto_run_execs}
        \nAudit Policy Settings:\n{audit_policy_settings}
        \nEnvironment Variables:\n{env_info}
        \nSDDL Info:\n{sddl_info}
        \nDefender Exclusions:\n{defender_exclusions}
        """
        
        vulnerabilities = []
        if "Firewall is disabled." in firewall_status:
            vulnerabilities.append("Firewall is disabled.")
        if "AntivirusSignatureLastUpdated" in antivirus_definitions:
            vulnerabilities.append("Antivirus definitions may be outdated.")
        
        output_file = filedialog.asksaveasfilename(defaultextension=".html", filetypes=[("HTML files", "*.html")], title="Save Report As")
        if output_file:
            generate_report(
                system_info=system_info,
                vulnerabilities=vulnerabilities,
                firewall_status=firewall_status,
                antivirus_definitions=antivirus_definitions,
                rdp_settings=rdp_settings,
                network_info=network_info,
                output_file=output_file
            )
            network_diagram_file = output_file.replace('.html', '_network_diagram')
            generate_network_diagram(network_info, network_diagram_file)

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred during the scan: {e}")

def create_gui():
    # Create the main window
    root = Tk()
    root.title("Windows Vulnerability Scanner")

    # Define the label and button for the GUI
    label = Label(root, text="Welcome to the Windows Vulnerability Scanner", padx=20, pady=20)
    label.pack()

    scan_button = Button(root, text="Start Scan", command=start_scan, padx=10, pady=10)
    scan_button.pack()

    # Run the GUI event loop
    root.mainloop()

# Execute the GUI
if __name__ == "__main__":
    create_gui()