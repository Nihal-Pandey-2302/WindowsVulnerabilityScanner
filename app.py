import subprocess
import os
from flask import Flask, render_template, request, send_from_directory
from datetime import datetime

app = Flask(__name__)

# Function Definitions

def execute_remote_powershell_command(command, host):
    ps_command = f"Invoke-Command -ComputerName {host} -ScriptBlock {{{command}}}"
    result = subprocess.run(["powershell", "-Command", ps_command], capture_output=True, text=True)
    
    if result.returncode != 0:
        error_message = f"Error executing command on {host}: {result.stderr.strip()}"
        return "", error_message  # Return empty stdout and the error message
    
    return result.stdout.strip(), ""

def get_os_details(host):
    command = "Get-WmiObject -Class Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber"
    return execute_remote_powershell_command(command, host)

def get_dotnet_versions(host):
    command = """
    Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -Recurse |
    Get-ItemProperty -Name Version -ErrorAction SilentlyContinue |
    Where-Object { $_.Version -match '^\\d+\\.\\d+' } | 
    Select-Object -Property Version
    """
    return execute_remote_powershell_command(command, host)

def get_amsi_providers(host):
    command = """
    Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers' |
    ForEach-Object {
        Get-ItemProperty -Path $_.PSPath | Select-Object -Property *
    }
    """
    stdout, stderr = execute_remote_powershell_command(command, host)
    if stderr:
        return "Error retrieving AMSI Providers: " + stderr
    return stdout.strip() if stdout.strip() else "No AMSI Providers found on this system."

def get_installed_hotfixes(host):
    command = "Get-HotFix"
    return execute_remote_powershell_command(command, host)

def get_windows_defender_status(host):
    command = "Get-MpPreference | Select-Object -Property DisableRealtimeMonitoring"
    stdout, stderr = execute_remote_powershell_command(command, host)
    if stderr:
        return "Error retrieving Windows Defender Status: " + stderr
    lines = stdout.strip().splitlines()
    if len(lines) > 1:
        status = lines[1].strip()  # Extract the relevant line
    else:
        status = "No Windows Defender Status information available."
    return f"Disable Realtime Monitoring: {status}"

def get_auto_run_executables(host):
    command = "Get-CimInstance -ClassName Win32_StartupCommand | Select-Object Name, Command"
    return execute_remote_powershell_command(command, host)

def check_firewall_status(host):
    command = "Get-NetFirewallProfile | Select-Object -Property Name, Enabled"
    stdout, stderr = execute_remote_powershell_command(command, host)
    if stderr:
        return f"Error checking firewall status: {stderr}"
    if "False" in stdout:
        return "Firewall is disabled."
    return "Firewall is enabled."

def check_antivirus_definitions(host):
    command = "Get-MpComputerStatus | Select-Object -Property AntivirusSignatureLastUpdated"
    return execute_remote_powershell_command(command, host)

def check_rdp_settings(host):
    command = "Get-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server' | Select-Object -Property fDenyTSConnections"
    stdout, stderr = execute_remote_powershell_command(command, host)
    if stderr:
        return f"Error checking RDP settings: {stderr}"
    if "0" in stdout:
        return "Remote Desktop is enabled (fDenyTSConnections=0)."
    return "Remote Desktop is disabled (fDenyTSConnections=1)."

def get_audit_policy_settings(host):
    command = "AuditPol /get /category:*"
    return execute_remote_powershell_command(command, host)

def get_environment_info(host):
    command = "Get-ChildItem Env:"
    return execute_remote_powershell_command(command, host)

def get_sddl_info(host):
    command = "Get-ACL -Path C:\\ | Select-Object -Property Sddl"
    return execute_remote_powershell_command(command, host)

def get_defender_exclusions(host):
    command = "Get-MpPreference | Select-Object -Property ExclusionProcess, ExclusionExtension, ExclusionPath"
    return execute_remote_powershell_command(command, host)

def get_network_info(host):
    commands = {
        "ARP Table": "Get-NetNeighbor",
        "DNS Cache": "Get-DnsClientCache",
        "Network Profiles": "Get-NetConnectionProfile",
        "Network Shares": "Get-SmbShare",
        "TCP Connections": "Get-NetTCPConnection",
        "UDP Connections": "Get-NetUDPEndpoint",
        "Open Ports": "Get-NetFirewallPortFilter"
    }
    results = {}
    for key, command in commands.items():
        stdout, stderr = execute_remote_powershell_command(command, host)
        results[key] = stdout.strip() if stdout else stderr.strip()  # Store error if stdout is empty
    return results

def generate_report(system_info, vulnerabilities, firewall_status, antivirus_definitions, rdp_settings, network_info, defender_status):
    report_content = render_template("report_template.html",
        system_info=system_info,
        vulnerabilities=vulnerabilities,
        firewall_status=firewall_status,
        antivirus_definitions=antivirus_definitions,
        rdp_settings=rdp_settings,
        network_info=network_info,
        defender_status=defender_status,
        current_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )
    return report_content

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/scan', methods=['POST'])
def scan():
    target_host = request.form.get('computer_name')  # Get the target IP from the form submission
    try:
        os_details = get_os_details(target_host)
        dotnet_versions = get_dotnet_versions(target_host)
        amsi_providers = get_amsi_providers(target_host)
        hotfixes = get_installed_hotfixes(target_host)
        defender_status = get_windows_defender_status(target_host)
        auto_run_execs = get_auto_run_executables(target_host)
        firewall_status = check_firewall_status(target_host)
        antivirus_definitions = check_antivirus_definitions(target_host)
        rdp_settings = check_rdp_settings(target_host)
        audit_policy_settings = get_audit_policy_settings(target_host)
        env_info = get_environment_info(target_host)
        sddl_info = get_sddl_info(target_host)
        defender_exclusions = get_defender_exclusions(target_host)
        network_info = get_network_info(target_host)
        
        system_info = f"""
        OS Details:\n{os_details[0]}
        \nDotNet Versions:\n{dotnet_versions[0]}
        \nAMSI Providers:\n{amsi_providers[0]}
        \nInstalled Hotfixes:\n{hotfixes[0]}
        \nWindows Defender Status:\n{defender_status[0]}
        \nAuto-Run Executables:\n{auto_run_execs[0]}
        \nAudit Policy Settings:\n{audit_policy_settings[0]}
        \nEnvironment Variables:\n{env_info[0]}
        \nSDDL Info:\n{sddl_info[0]}
        \nDefender Exclusions:\n{defender_exclusions[0]}
        """
        
        vulnerabilities = []
        if "Firewall is disabled." in firewall_status:
            vulnerabilities.append("Firewall is disabled.")
        if "AntivirusSignatureLastUpdated" in antivirus_definitions:
            vulnerabilities.append("Antivirus definitions may be outdated.")
        
        report_content = generate_report(
            system_info=system_info,
            vulnerabilities=vulnerabilities,
            firewall_status=firewall_status,
            antivirus_definitions=antivirus_definitions,
            rdp_settings=rdp_settings,
            network_info=network_info,
            defender_status=defender_status  # Added defender status
        )

        return report_content

    except Exception as e:
        return f"An error occurred during the scan: {str(e)}"

@app.route('/deep-scan-progress')
def deep_scan_progress():
    return render_template('deep_scan_progress.html')

if __name__ == "__main__":
    app.run(debug=True)
